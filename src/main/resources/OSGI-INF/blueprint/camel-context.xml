<?xml version="1.0" encoding="UTF-8"?>
<!--

     Copyright 2005-2016 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<!--
   This is the OSGi Blueprint XML file defining the Camel context and routes.  Because the file is in the
   OSGI-INF/blueprint directory inside our JAR, it will be automatically activated as soon as the bundle is installed.

   The root element for any OSGi Blueprint file is 'blueprint' - you also see the namespace definitions for both the Blueprint
   and the Camel namespaces.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0"
           xsi:schemaLocation="
             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

  <ext:property-placeholder evaluator="fabric8"/>

  <bean id="orderGenerator" class="io.fabric8.quickstarts.camelamq.OrderGenerator"/>

  <bean id="amqpConnectionFactory" class="org.apache.qpid.jms.JmsConnectionFactory">
    <property name="username"  value="${env:AMQ_CAMEL_USERNAME}"/>
    <property name="password"  value="${env:AMQ_CAMEL_PASSWORD}"/>
    <property name="remoteURI" value="amqps://${env:AMQ_CAMEL_SERVICE_NAME}:${env:AMQ_CAMEL_SERVICE_PORT_AMQPS}?${env:AMQ_CAMEL_PARAMETERS}"/>
    <property name="receiveLocalOnly" value="true" />
  </bean>

  <bean id="cachingConnectionFactory"
    class="org.springframework.jms.connection.CachingConnectionFactory">
    <property name="targetConnectionFactory" ref="amqpConnectionFactory" />
  </bean>

  <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration" >
    <property name="connectionFactory" ref="cachingConnectionFactory" />
    <property name="cacheLevelName" value="CACHE_AUTO" />
  </bean>

  <bean id="amqp" class="org.apache.camel.component.amqp.AMQPComponent">
    <property name="configuration" ref="jmsConfig" />
  </bean>

  <!--
    The namespace for the camelContext element in Blueprint is 'http://camel.apache.org/schema/blueprint'. Additionally,
    we can also define namespace prefixes we want to use them in the XPath expressions in our CBR.

    While it is not required to assign id's to the <camelContext/> and <route/> elements, it is a good idea
    to set those for runtime management purposes (logging, JMX MBeans, ...)
  -->
  <camelContext xmlns="http://camel.apache.org/schema/blueprint" xmlns:order="http://fabric8.com/examples/order/v7" id="jms-example-context">

    <!-- a route to generate a random order every 5th second -->
    <route id="generate-order">
      <from id="order-timer" uri="timer:order?period=5000"/>
      <bean id="order-generate" ref="orderGenerator" method="generateOrder"/>
      <setHeader id="order-filename" headerName="Exchange.FILE_NAME">
        <method ref="orderGenerator" method="generateFileName"/>
      </setHeader>
      <to id="order-to-file" uri="file:work/jms/input"/>
    </route>

    <!--
      When this route is started, it will automatically create the work/jms/input directory where you can drop the
      file that need to be processed.

      The <log/> elements are used to add human-friendly business logging statements. They make it easier to see what the
      route is doing.

      Files that are consumed from the work/jms/input directory, are then sent to the JMS queue incomingOrders on the
      ActiveMQ broker.
    -->
    <route id="file-to-jms-route">
      <from id="order-from-file" uri="file:work/jms/input"/>
      <log id="log-order" message="Receiving order ${file:name}" loggingLevel="INFO"/>
      <to id="order-to-queue" uri="amqp:queue:incomingOrders"/>
    </route>

    <!--
      This route consumes messages from the JMS queue incomingOrders on the ActiveMQ broker within the ESB.

      The <choice/> element contains the content based router. The two <when/> clauses use XPath to define the criteria
      for entering that part of the route. When the country in the XML message is set to UK or US, the file will be
      moved to a directory for that country. The <otherwise/> element ensures that any file that does not meet the
      requirements for either of the <when/> elements will be moved to the work/jms/output/others directory.
    -->
    <route id="jms-cbr-route" streamCache="true">
      <from id="order-from-queue" uri="amqp:queue:incomingOrders"/>
      <choice id="order-choice">
        <when id="when-order-uk">
          <xpath>/order:order/order:customer/order:country = 'UK'</xpath>
          <log id="log-order-uk" message="Sending order ${file:name} to the UK" loggingLevel="INFO"/>
          <to id="file-order-uk" uri="file:work/jms/output/uk"/>
        </when>
        <when id="when-order-us">
          <xpath>/order:order/order:customer/order:country = 'US'</xpath>
          <log id="log-order-us" message="Sending order ${file:name} to the US" loggingLevel="INFO"/>
          <to id="file-order-us" uri="file:work/jms/output/us"/>
        </when>
        <otherwise id="when-other-order">
          <log id="log-other-order" message="Sending order ${file:name} to another country" loggingLevel="INFO"/>
          <to id="file-other-order" uri="file:work/jms/output/others"/>
        </otherwise>
      </choice>
      <log id="log-done" message="Done processing ${file:name}"/>
    </route>
  </camelContext>

</blueprint>
